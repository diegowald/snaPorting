'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
'
Namespace CatalogoWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="InfoSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Info
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetIpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetIpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIpIntranetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetIpIntranetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIpCatalogoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetIpCatalogoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CatalogoLibraryVB.My.MySettings.Default.CatalogoLibraryVB_CatalogoWS_Info
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetIpCompleted As GetIpCompletedEventHandler
        
        '''<remarks/>
        Public Event SetIpCompleted As SetIpCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIpIntranetCompleted As GetIpIntranetCompletedEventHandler
        
        '''<remarks/>
        Public Event SetIpIntranetCompleted As SetIpIntranetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIpCatalogoCompleted As GetIpCatalogoCompletedEventHandler
        
        '''<remarks/>
        Public Event SetIpCatalogoCompleted As SetIpCatalogoCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIp", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIp(ByVal MacAddress As String) As String
            Dim results() As Object = Me.Invoke("GetIp", New Object() {MacAddress})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIpAsync(ByVal MacAddress As String)
            Me.GetIpAsync(MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIpAsync(ByVal MacAddress As String, ByVal userState As Object)
            If (Me.GetIpOperationCompleted Is Nothing) Then
                Me.GetIpOperationCompleted = AddressOf Me.OnGetIpOperationCompleted
            End If
            Me.InvokeAsync("GetIp", New Object() {MacAddress}, Me.GetIpOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIpOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIpCompleted(Me, New GetIpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetIp", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetIp(ByVal MacAddress As String, ByVal NewURL As String) As Boolean
            Dim results() As Object = Me.Invoke("SetIp", New Object() {MacAddress, NewURL})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetIpAsync(ByVal MacAddress As String, ByVal NewURL As String)
            Me.SetIpAsync(MacAddress, NewURL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetIpAsync(ByVal MacAddress As String, ByVal NewURL As String, ByVal userState As Object)
            If (Me.SetIpOperationCompleted Is Nothing) Then
                Me.SetIpOperationCompleted = AddressOf Me.OnSetIpOperationCompleted
            End If
            Me.InvokeAsync("SetIp", New Object() {MacAddress, NewURL}, Me.SetIpOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetIpOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetIpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetIpCompleted(Me, New SetIpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIpIntranet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIpIntranet(ByVal MacAddress As String) As String
            Dim results() As Object = Me.Invoke("GetIpIntranet", New Object() {MacAddress})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIpIntranetAsync(ByVal MacAddress As String)
            Me.GetIpIntranetAsync(MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIpIntranetAsync(ByVal MacAddress As String, ByVal userState As Object)
            If (Me.GetIpIntranetOperationCompleted Is Nothing) Then
                Me.GetIpIntranetOperationCompleted = AddressOf Me.OnGetIpIntranetOperationCompleted
            End If
            Me.InvokeAsync("GetIpIntranet", New Object() {MacAddress}, Me.GetIpIntranetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIpIntranetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIpIntranetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIpIntranetCompleted(Me, New GetIpIntranetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetIpIntranet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetIpIntranet(ByVal MacAddress As String, ByVal NewURL As String) As Boolean
            Dim results() As Object = Me.Invoke("SetIpIntranet", New Object() {MacAddress, NewURL})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetIpIntranetAsync(ByVal MacAddress As String, ByVal NewURL As String)
            Me.SetIpIntranetAsync(MacAddress, NewURL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetIpIntranetAsync(ByVal MacAddress As String, ByVal NewURL As String, ByVal userState As Object)
            If (Me.SetIpIntranetOperationCompleted Is Nothing) Then
                Me.SetIpIntranetOperationCompleted = AddressOf Me.OnSetIpIntranetOperationCompleted
            End If
            Me.InvokeAsync("SetIpIntranet", New Object() {MacAddress, NewURL}, Me.SetIpIntranetOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetIpIntranetOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetIpIntranetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetIpIntranetCompleted(Me, New SetIpIntranetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIpCatalogo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIpCatalogo(ByVal MacAddress As String) As String
            Dim results() As Object = Me.Invoke("GetIpCatalogo", New Object() {MacAddress})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIpCatalogoAsync(ByVal MacAddress As String)
            Me.GetIpCatalogoAsync(MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIpCatalogoAsync(ByVal MacAddress As String, ByVal userState As Object)
            If (Me.GetIpCatalogoOperationCompleted Is Nothing) Then
                Me.GetIpCatalogoOperationCompleted = AddressOf Me.OnGetIpCatalogoOperationCompleted
            End If
            Me.InvokeAsync("GetIpCatalogo", New Object() {MacAddress}, Me.GetIpCatalogoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIpCatalogoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIpCatalogoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIpCatalogoCompleted(Me, New GetIpCatalogoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetIpCatalogo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetIpCatalogo(ByVal MacAddress As String, ByVal NewURL As String) As Boolean
            Dim results() As Object = Me.Invoke("SetIpCatalogo", New Object() {MacAddress, NewURL})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetIpCatalogoAsync(ByVal MacAddress As String, ByVal NewURL As String)
            Me.SetIpCatalogoAsync(MacAddress, NewURL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetIpCatalogoAsync(ByVal MacAddress As String, ByVal NewURL As String, ByVal userState As Object)
            If (Me.SetIpCatalogoOperationCompleted Is Nothing) Then
                Me.SetIpCatalogoOperationCompleted = AddressOf Me.OnSetIpCatalogoOperationCompleted
            End If
            Me.InvokeAsync("SetIpCatalogo", New Object() {MacAddress, NewURL}, Me.SetIpCatalogoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetIpCatalogoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetIpCatalogoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetIpCatalogoCompleted(Me, New SetIpCatalogoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetIpCompletedEventHandler(ByVal sender As Object, ByVal e As GetIpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetIpCompletedEventHandler(ByVal sender As Object, ByVal e As SetIpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetIpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetIpIntranetCompletedEventHandler(ByVal sender As Object, ByVal e As GetIpIntranetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIpIntranetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetIpIntranetCompletedEventHandler(ByVal sender As Object, ByVal e As SetIpIntranetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetIpIntranetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetIpCatalogoCompletedEventHandler(ByVal sender As Object, ByVal e As GetIpCatalogoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIpCatalogoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetIpCatalogoCompletedEventHandler(ByVal sender As Object, ByVal e As SetIpCatalogoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetIpCatalogoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace

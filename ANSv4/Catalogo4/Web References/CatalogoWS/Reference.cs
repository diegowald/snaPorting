//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.18444
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.18444.
// 
#pragma warning disable 1591

namespace Catalogo.CatalogoWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InfoSoap", Namespace="http://tempuri.org/")]
    public partial class Info : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetIpOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIpIntranetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIpIntranetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIpCatalogoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIpCatalogoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Info() {
            this.Url = global::Catalogo.Properties.Settings.Default.Catalogo_CatalogoWS_Info;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetIpCompletedEventHandler GetIpCompleted;
        
        /// <remarks/>
        public event SetIpCompletedEventHandler SetIpCompleted;
        
        /// <remarks/>
        public event GetIpIntranetCompletedEventHandler GetIpIntranetCompleted;
        
        /// <remarks/>
        public event SetIpIntranetCompletedEventHandler SetIpIntranetCompleted;
        
        /// <remarks/>
        public event GetIpCatalogoCompletedEventHandler GetIpCatalogoCompleted;
        
        /// <remarks/>
        public event SetIpCatalogoCompletedEventHandler SetIpCatalogoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIp(string MacAddress) {
            object[] results = this.Invoke("GetIp", new object[] {
                        MacAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIpAsync(string MacAddress) {
            this.GetIpAsync(MacAddress, null);
        }
        
        /// <remarks/>
        public void GetIpAsync(string MacAddress, object userState) {
            if ((this.GetIpOperationCompleted == null)) {
                this.GetIpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIpOperationCompleted);
            }
            this.InvokeAsync("GetIp", new object[] {
                        MacAddress}, this.GetIpOperationCompleted, userState);
        }
        
        private void OnGetIpOperationCompleted(object arg) {
            if ((this.GetIpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIpCompleted(this, new GetIpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetIp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetIp(string MacAddress, string NewURL) {
            object[] results = this.Invoke("SetIp", new object[] {
                        MacAddress,
                        NewURL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetIpAsync(string MacAddress, string NewURL) {
            this.SetIpAsync(MacAddress, NewURL, null);
        }
        
        /// <remarks/>
        public void SetIpAsync(string MacAddress, string NewURL, object userState) {
            if ((this.SetIpOperationCompleted == null)) {
                this.SetIpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIpOperationCompleted);
            }
            this.InvokeAsync("SetIp", new object[] {
                        MacAddress,
                        NewURL}, this.SetIpOperationCompleted, userState);
        }
        
        private void OnSetIpOperationCompleted(object arg) {
            if ((this.SetIpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIpCompleted(this, new SetIpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIpIntranet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIpIntranet(string MacAddress) {
            object[] results = this.Invoke("GetIpIntranet", new object[] {
                        MacAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIpIntranetAsync(string MacAddress) {
            this.GetIpIntranetAsync(MacAddress, null);
        }
        
        /// <remarks/>
        public void GetIpIntranetAsync(string MacAddress, object userState) {
            if ((this.GetIpIntranetOperationCompleted == null)) {
                this.GetIpIntranetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIpIntranetOperationCompleted);
            }
            this.InvokeAsync("GetIpIntranet", new object[] {
                        MacAddress}, this.GetIpIntranetOperationCompleted, userState);
        }
        
        private void OnGetIpIntranetOperationCompleted(object arg) {
            if ((this.GetIpIntranetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIpIntranetCompleted(this, new GetIpIntranetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetIpIntranet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetIpIntranet(string MacAddress, string NewURL) {
            object[] results = this.Invoke("SetIpIntranet", new object[] {
                        MacAddress,
                        NewURL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetIpIntranetAsync(string MacAddress, string NewURL) {
            this.SetIpIntranetAsync(MacAddress, NewURL, null);
        }
        
        /// <remarks/>
        public void SetIpIntranetAsync(string MacAddress, string NewURL, object userState) {
            if ((this.SetIpIntranetOperationCompleted == null)) {
                this.SetIpIntranetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIpIntranetOperationCompleted);
            }
            this.InvokeAsync("SetIpIntranet", new object[] {
                        MacAddress,
                        NewURL}, this.SetIpIntranetOperationCompleted, userState);
        }
        
        private void OnSetIpIntranetOperationCompleted(object arg) {
            if ((this.SetIpIntranetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIpIntranetCompleted(this, new SetIpIntranetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIpCatalogo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIpCatalogo(string MacAddress) {
            object[] results = this.Invoke("GetIpCatalogo", new object[] {
                        MacAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIpCatalogoAsync(string MacAddress) {
            this.GetIpCatalogoAsync(MacAddress, null);
        }
        
        /// <remarks/>
        public void GetIpCatalogoAsync(string MacAddress, object userState) {
            if ((this.GetIpCatalogoOperationCompleted == null)) {
                this.GetIpCatalogoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIpCatalogoOperationCompleted);
            }
            this.InvokeAsync("GetIpCatalogo", new object[] {
                        MacAddress}, this.GetIpCatalogoOperationCompleted, userState);
        }
        
        private void OnGetIpCatalogoOperationCompleted(object arg) {
            if ((this.GetIpCatalogoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIpCatalogoCompleted(this, new GetIpCatalogoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetIpCatalogo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetIpCatalogo(string MacAddress, string NewURL) {
            object[] results = this.Invoke("SetIpCatalogo", new object[] {
                        MacAddress,
                        NewURL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetIpCatalogoAsync(string MacAddress, string NewURL) {
            this.SetIpCatalogoAsync(MacAddress, NewURL, null);
        }
        
        /// <remarks/>
        public void SetIpCatalogoAsync(string MacAddress, string NewURL, object userState) {
            if ((this.SetIpCatalogoOperationCompleted == null)) {
                this.SetIpCatalogoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIpCatalogoOperationCompleted);
            }
            this.InvokeAsync("SetIpCatalogo", new object[] {
                        MacAddress,
                        NewURL}, this.SetIpCatalogoOperationCompleted, userState);
        }
        
        private void OnSetIpCatalogoOperationCompleted(object arg) {
            if ((this.SetIpCatalogoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIpCatalogoCompleted(this, new SetIpCatalogoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        | (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetIpCompletedEventHandler(object sender, GetIpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetIpCompletedEventHandler(object sender, SetIpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetIpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetIpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetIpIntranetCompletedEventHandler(object sender, GetIpIntranetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIpIntranetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIpIntranetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetIpIntranetCompletedEventHandler(object sender, SetIpIntranetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetIpIntranetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetIpIntranetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetIpCatalogoCompletedEventHandler(object sender, GetIpCatalogoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIpCatalogoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIpCatalogoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetIpCatalogoCompletedEventHandler(object sender, SetIpCatalogoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetIpCatalogoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetIpCatalogoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591